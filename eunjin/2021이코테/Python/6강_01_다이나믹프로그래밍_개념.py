#다이나믹 프로그래밍: 메모리를 적절히 사용하여 수행 시간 효율성을 비약적으로 향상/이미 계산된 결과는 별도의 메모리 영역에 저장
#답다운, 보텀업 두 가지로 구성
#사용조건 만족: 최적 부분 구조(큰 문제를 작은 문제로 나눌 수 있으며 작은 문제의 답을 모아서 큰 문제를 해결), 중복되는 부분 문제(동일한 작은 문제를 반복적으로 해결)

#탑다운 다이나믹 프로그래밍
d = [0] * 100

def fibo(x):
  if x == 1 or x == 2:
    return 1
  if d[x] != 0:
    return d[x]
  d[x] = fibo(x-1) + fibo(x-2)
  return d[x]

print(fibo(99))

