import java.io.*;
import java.util.*;

class Main {

  static int N,M;
  static List<Integer>[] graph;
  static boolean[] visit;

  public static void main(String[] args) throws Exception{
    
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    StringTokenizer st = new StringTokenizer(br.readLine());

    N = Integer.parseInt(st.nextToken());
    M = Integer.parseInt(st.nextToken());
    int S = Integer.parseInt(st.nextToken());

    graph = new ArrayList[N+1];
    for(int i=1; i<=N; i++){
      graph[i] = new ArrayList<>();
    }
    for(int i=0; i<M; i++){
      st = new StringTokenizer(br.readLine());
      int v1 = Integer.parseInt(st.nextToken());
      int v2 = Integer.parseInt(st.nextToken());

      graph[v1].add(v2);
      graph[v2].add(v1);
    }

      for (int i = 1; i <= N; i++) {
            Collections.sort(graph[i]);
        }

    visit = new boolean[N+1];
    dfs(S);
    System.out.println("");
    visit = new boolean[N+1];
    bfs(S);

  }

  public static void dfs(int x){
    if(visit[x]) return;

    visit[x] = true;
    System.out.print(x + " ");
    for(int y : graph[x]){
      if(visit[y] == false){
        dfs(y);
      }
    }
  }

  public static void bfs(int x){
    Queue<Integer> q = new LinkedList<>();
    q.offer(x);
    visit[x] = true;
    while(!q.isEmpty()){
      int y = q.poll();
      System.out.print(y + " ");
      for(int z: graph[y]){
        if(visit[z] == false){
          visit[z] = true;
          q.offer(z);
        }
      }
    }
  }
  
}
