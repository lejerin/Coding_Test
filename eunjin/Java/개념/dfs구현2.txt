import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.StringTokenizer;
 
public class Main {
    
    static int V,E;
    static List<Integer>[] graph;
    static boolean[] visit;
    
    static boolean find;
    
    public static void main(String[] args) throws Exception {
         BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
         StringTokenizer st = new StringTokenizer(br.readLine());
         
         V=Integer.parseInt(st.nextToken());
         E=Integer.parseInt(st.nextToken());
         
         graph=new ArrayList[V];
         for(int i=0;i<V;i++)
             graph[i]=new ArrayList<>();
         
         for(int i=0;i<E;i++) {
             st=new StringTokenizer(br.readLine());
             int v1=Integer.parseInt(st.nextToken());
             int v2=Integer.parseInt(st.nextToken());
         
             graph[v1].add(v2);
             graph[v2].add(v1);
         }
         
         find=false;
         visit=new boolean[V];
         
         for(int i=0;i<V;i++) {
             if(visit[i]==false && find==false)
                 dfs(i,1);
         }
         
         System.out.println(find?1:0);
    }
    
    static void dfs(int i,int depth) {
        System.out.println(i+", depth"+depth);
        if(depth==5) {
            find=true;
            return;
        }
        visit[i]=true;
        
        for(int next : graph[i]) {
            if(visit[next]==false) {
                dfs(next,depth+1);
            }
        }
        visit[i]=false;
            
    }
    
}